.grid {
  border: 2px blue solid;
  width: 400px;
  height: 500px;
  display: grid; /* grid 설정, or inline-grid로 inline형으로 만들 수 있다 */
  /* grid-template-columns: 100px 50% 200px;  grid열 형성, 3개를 썼으므로 3개 열이 만들어진다. 단위는 섞어 쓸 수 있다. 총 width가 400이므로 이 grid item 3개는 width를 침범해 들어온다. */
  /* grid-template-rows: 40% 50% 60px;  grid 행 구조 지정 */
  grid-template: 40% 50% 50px / 100px 50% 200px; /* 위의 column, row를 하나로 합치기 행 지정/열 지정 */
}

grid-template: 1fr 1fr 1fr / 3fr 50% 1fr; /* fr: fraction 단위를 사용하면 item이 box를 안 넘고 구획을 나눌 수 있다. */
grid-template: repeat(3, 1fr) / 3fr 50% 1fr; /* repeat 함수로 반복 가능, 이 경우 1fr을 3번 구획한다. */

.grid {
  display: grid;
  border: 2px blue solid;
  height: 500px;
  grid-template: repeat(3, 1fr) / 3fr minmax(50px, 300px) 1fr; /* minmax함수는 창이 바뀌면 그 만큼 축소/확대된다. 지정 안된 변수는 항상 고정이다. */
}                                                              /* minmax 쓸 때는 width를 지워야 한다!) */

.grid {
  display: grid;
  width: 320px;
  grid-template: repeat(3, 1fr) / 3fr 50% 1fr; /* gap을 준 후엔 width나 height에 gap만큼 차감한 후 item들의 각 width와 height를 계산한다. */
  grid-column-gap: 10px; /* grid gap을 쓸 땐 맨 끝에 gap은 주지 않는다 */
}   /* or grid-gap: 10px 20px; 행과 열에 동시에 gap을 줄 수 있다. */

.a {
  grid-row-start: 5;
  grid-row-end: 7; /*grid row 5부터 row 6까지 grid item 차지 */
  grid-row: 5/7; /* 하나로 합치기 */
} /* span 요소는 gap이 있으면 gap까지 포함한다. */

.item {
  grid-column-start: 4;
  grid-column-end: span 2; /* 2열 차지 span 1은 자기 자신을 포함한다. */
  grid-column: 4 / 6; /* 위와 같다 */
}

.c {
  grid-area: 6 / 8 / span 3 / span 1; /* row start / column start / row end / column end 순 */
}


.container {
  display: grid;
  max-width: 900px;
  position: relative;
  margin: auto;
  grid-gap: 10px;
  grid-template-areas: /* area 명칭 지정으로 아래 grid-area로 값을 받을 수 있다. 포인터 같은 기능 */
    "header header"
    "nav nav" /* nav nav 중복으로 span2 효과를 주었다 */
    "left right"
    "footer footer";
      grid-template-columns: 200px 400px;
      grid-template-rows: 150px 100px 100px 200px;
}
header {
  background-color: dodgerblue;
  grid-area: header;
}
nav {
  background-color: beige;
  grid-area: nav;
}
.left {
  background-color: dodgerblue;
    grid-area: left;
}
.right {
  background-color: beige;
  grid-area: right;
}
footer {
  background-color: dodgerblue;
    grid-area: footer;
}

.overlap {
  background-color: lightcoral;
    grid-area: 6 / 4 / 8 / 6;
  z-index: 5; /* grid 체계를 이용하면 편하게 overlap도 가능하다. 원하는 요소가 밑으로 내려갈 경우 z-index를 이용하자. */
}

/* 아래 요소들은 container 내 전체 요소들에 적용되므로 container { } 내에 쓴다. */
justify-items: right; /*container 안 요소간의 column 방향 정리방식을 결정, right center left 성분을 가진다. 사실 잘 모르겠다...  */
justify-content: center; /*container 안의 모든 요소들의 전체 column 방향 정렬방식을 결정, start end center stretch space-around space-between space-evenly 성분을 가진다.  */
align-items: stretch; /* 요소들 간의 행 방향 정렬방식을 결정, start end center stretch */
align-content: center; /* 전체 container 내 요소들의 정렬방식 결정 성분은 justify-content 와 같다 */
/* 아래 요소들은 개별로 적용되므로 개별 블록안에 쓴다. */
justify-self: start;
align-self: end;

grid-auto-rows: 500px; /* 추가되는 item이 있을 경우 허용치를 넘기 전까지 같은 row에 있게한다. */
grid-auto-columns: 500px;
grid-auto-flow: column; /* 추가되는 item이 colum 인지 row인지 dense인지 결정 */
